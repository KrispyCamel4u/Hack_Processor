// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //mx1
    Mux16( a=instruction,b=ALUout, sel[0]=instruction[15], out=AregIn);      //incoming instruction and aluout selction   
    
    //this is A register
    ARegister(in=AregIn, load=cAreg, out=AregOut,out[0..14]=addressM);   

    //mx2
    Mux16(a=AregOut, b=inM, sel[0]=instruction[12], out=ALUinB);  // selecting the among memory value and a reg value    
    
    // this is D register, control for it is directly d2
    And(a[0]=instruction[4], b[0]=instruction[15], out=cDreg);
    DRegister(in=ALUout, load[0]=cDreg, out=ALUinA);  
    
    //inc will be true because pc always need to be incremented and there are priority based signal also to stop the incrementation 
    PC(in=AregOut, load=pcload, inc=true, reset=reset, out[0..14]=pc);

    ALU(x=ALUinA, y=ALUinB, zx[0]=instruction[11], nx[0]=instruction[10], zy[0]=instruction[9], ny[0]=instruction[8], f[0]=instruction[7], no[0]=instruction[6], out=ALUout,out=outM, zr=zr, ng=ng);
    
    //control unit

    //A register control 
    Mux(a=true, b[0]=instruction[5], sel[0]=instruction[15], out=cAreg);

    //write M is memory write signal out from cpu which is directly controlled from d3 as control signal
    And(a[0]=instruction[15], b[0]=instruction[3], out=writeM);

    //control logic for pc load exp=ng.j1+zr.j2+!zr!ng.j3 assuming only c type ins
    And(a=ng, b[0]=instruction[2], out=t1);

    And(a=zr, b[0]=instruction[1], out=t2);

    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);

    And(a=nng, b=nzr, out=t3);
    And(a=t3, b[0]=instruction[0], out=t4);

    Or(a=t1, b=t2, out=t5);

    Or(a=t5, b=t4, out=ctypepcload);

    //considering general instruction
    And(a=ctypepcload, b[0]=instruction[15], out=pcload);



}